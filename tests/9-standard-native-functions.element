TEST_CASE function any() returns true

[false, false, true] -> any(::$ == true) == true

TEST_CASE function any() returns false

[false, false, false] -> any(::$ == true) == false

TEST_CASE function all() returns true

[true, true, true] -> all(::$ == true) == true

TEST_CASE function all() returns false

[true, true, false] -> all(::$ == true) == false

TEST_CASE function map() inverts booleans

a = [true, false, true, true]

b = map(a, ::not $)

a[0] == not b[0] and
a[1] == not b[1] and
a[2] == not b[2] and
a[3] == not b[3]

TEST_CASE function to_upper() 1

to_upper("aBcDeF") == "ABCDEF"

TEST_CASE function to_upper() 2

to_upper("") == ""

TEST_CASE function to_upper() 3

to_upper("9a1B") == "9A1B"

TEST_CASE function to_lower() 1

to_lower("aBcDeF") == "abcdef"

TEST_CASE function to_lower() 2

to_lower("") == ""

TEST_CASE function to_lower() 3

to_lower("B11a") == "b11a"
