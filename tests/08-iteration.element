TEST_CASE iterate array

s = 0

for( i in [1, 2, 3, 4] )
	s += i

s == 1 + 2 + 3 + 4

TEST_CASE iterate string

s = ""

for( i in "abcd" )
	s ~= i

s == "abcd"

TEST_CASE iterate range

s = 0

for( i in range(0, 10, 2) )
	s += i

s == 0 + 2 + 4 + 6 + 8

TEST_CASE make iterator from array

it = make_iterator([1, 2, 3])

it -> type() == "iterator"

TEST_CASE make iterator from string

it = make_iterator("abc")

it -> type() == "iterator"

TEST_CASE make iterator from coroutine instance

f :: yield 1
c = make_coroutine(f)

it = make_iterator(c)

it -> type() == "iterator"

TEST_CASE MUST_BE_ERROR make iterator from non-coroutine function

f :: nil

make_iterator(f)

TEST_CASE MUST_BE_ERROR make iterator from non-instantiated coroutine

f :: yield 1

make_iterator(f)

TEST_CASE make iterator from object

ones = 
[	has_next :: true,
	get_next :: 1
]

it = make_iterator(ones)

it -> type() == "iterator"

TEST_CASE MUST_BE_ERROR make iterator from object without 'get_next'

ones = 
[	has_next :: true,
	get_next_ :: 1
]

make_iterator(ones)

TEST_CASE MUST_BE_ERROR make iterator from object without 'has_next'

ones = 
[	has_next_ :: true,
	get_next :: 1
]

make_iterator(ones)

TEST_CASE MUST_BE_ERROR make iterator from non-iterable

i = 7

make_iterator(i)

TEST_CASE make iterator from iterator

r = range(1, 10)

it = make_iterator(r)

it -> type() == "iterator"

TEST_CASE manually iterate iterator

r = range(1, 3)

iterator_has_next(r) == true and
iterator_get_next(r) == 1 and
iterator_has_next(r) == true and
iterator_get_next(r) == 2 and
iterator_has_next(r) == false

TEST_CASE factorial object iterator

factorials_iterator:(_n)
[	i = 0,
	n = _n,
	factorial = 1,
	has_next :: this.i <= this.n,
	get_next ::
	{	v = this.factorial
		this.i += 1
		this.factorial *= this.i
		return v
	}
] -> make_iterator()

i = factorials_iterator(5)

iterator_get_next(i) == 1 and
iterator_get_next(i) == 1 and
iterator_get_next(i) == 2 and
iterator_get_next(i) == 6

TEST_CASE iterate over coroutine generated values

f ::
{
	yield  "a"
	yield  "b"
	yield  "c"
	yield  "d"
	return "e"
}

c = f -> make_coroutine()
a = []

for( i in c )
	a << i

a[0] == "a" and
a[2] == "c" and
a[4] == "e"

TEST_CASE stop and resume coroutine iteration

f ::
{
	yield  "a"
	yield  "b"
	yield  "c"
	yield  "d"
	return "e"
}

it = f -> make_coroutine() -> make_iterator()

for( i in it )
	if( i == "c" )
		break

iterator_has_next(it) and
iterator_get_next(it) == "d"
